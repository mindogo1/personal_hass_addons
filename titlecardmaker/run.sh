\
    #!/usr/bin/env sh
    set -e

    if [ -f /data/options.json ]; then
      EXPORTS=$(python3 - <<'PY'
import json, shlex
o = json.load(open('/data/options.json','r'))
def g(k,d=None):
    v = o.get(k, d)
    if isinstance(v,str) and v.strip()=="": return None
    return v
pairs = {
  'TZ': g('TZ'),
  'TCM_RUNTIME': g('TCM_RUNTIME'),
  'TCM_FREQUENCY': g('TCM_FREQUENCY'),
  'TCM_LOG': g('TCM_LOG','INFO'),
  'PUID': g('PUID'),
  'PGID': g('PGID'),
}
print("\n".join([f"export {k}={shlex.quote(str(v))}" for k,v in pairs.items() if v is not None]))
PY
)
      eval "$EXPORTS"
    fi

    python3 - <<'PY'
import os, json, yaml
class D(yaml.SafeDumper): pass
def rep(d, data): return d.represent_scalar('tag:yaml.org,2002:str', data)
D.add_representer(str, rep)

o = json.load(open('/data/options.json','r'))

def val(k, default=None):
    v = o.get(k, default)
    if isinstance(v, str) and v.strip() == "":
        return None
    return v

source_dir = val('SOURCE_DIR','/config/source/')
series_yaml = val('SERIES_YAML','/config/yaml/sonarr_sync.yml')
card_dir   = val('CARD_DIR','/config/cards/')

plex_url   = val('PLEX_URL')
plex_token = val('PLEX_TOKEN')
sonarr_url = val('SONARR_URL')
sonarr_key = val('SONARR_API_KEY')
tmdb_key   = val('TMDB_API_KEY')

down_only  = bool(o.get('SONARR_DOWNLOADED_ONLY', True))
mon_only   = bool(o.get('SONARR_MONITORED_ONLY', True))

pref = {
  'options': {
      'source': source_dir,
      'series': [series_yaml],
      'episode_data_source': 'sonarr',
  }
}

if plex_url and plex_token:
    pref['plex'] = { 'url': plex_url, 'token': plex_token }

if sonarr_url and sonarr_key:
    pref['sonarr'] = {
        'url': sonarr_url,
        'api_key': sonarr_key,
        'sync': [{
            'file': series_yaml,
            'card_directory': card_dir,
            'downloaded_only': down_only,
            'monitored_only': mon_only,
        }]
    }

if tmdb_key:
    pref['tmdb'] = { 'api_key': tmdb_key }

for p in [source_dir, os.path.dirname(series_yaml), card_dir]:
    os.makedirs(p, exist_ok=True)

pref_path = '/config/preferences.yml'
with open(pref_path, 'w', encoding='utf-8') as f:
    yaml.dump(pref, f, Dumper=D, sort_keys=False, default_flow_style=False)

if not os.path.exists(series_yaml):
    with open(series_yaml, 'w', encoding='utf-8') as f:
        f.write("# Auto-generated by HA add-on. Edit as needed.\n")
        f.write("libraries:\n  TV: {path: /media/tv}\nseries: {}\n")

print(f"Wrote preferences to {pref_path}")
PY

    if [ -x /start.sh ]; then
      exec /start.sh
    fi

    CMD="python3 /main.py"
    if command -v pipenv >/dev/null 2>&1; then
      CMD="pipenv run python /main.py"
    elif command -v python >/dev/null 2>&1; then
      CMD="python /main.py"
    fi

    ARGS="--preferences /config/preferences.yml --run"
    [ -n "${TCM_RUNTIME:-}" ] && ARGS="$ARGS --runtime ${TCM_RUNTIME}"
    [ -n "${TCM_FREQUENCY:-}" ] && ARGS="$ARGS --frequency ${TCM_FREQUENCY}"
    [ -n "${TCM_LOG:-}" ] && ARGS="$ARGS --log ${TCM_LOG}"

    echo "Launching TitleCardMaker v1..."
    exec sh -c "$CMD $ARGS"
